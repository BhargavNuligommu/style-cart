Controller:

@RestController
@RequestMapping("/battery")
public class BatteryController {

    private final BatteryService batteryService;

    public BatteryController(BatteryService batteryService) {
        this.batteryService = batteryService;
    }

    @GetMapping
    public List<Battery> listBatteries(@RequestParam(required = false) Integer limit,
                                      @RequestParam(required = false) String sort,
                                      @RequestParam(required = false) String param) {

        // If limit is present, limit the number of results
        if (limit != null) {
            return batteryService.listBatteries(limit);
        }

        // If sort is present, sort the results
        if (sort != null && param != null) {
            return batteryService.listBatteriesSorted(sort, param);
        }

        // Otherwise, return all batteries
        return batteryService.listBatteries();
    }

    @GetMapping("/{id}")
    public Battery getBattery(@PathVariable Long id) {
        return batteryService.getBattery(id);
    }

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public Battery createBattery(@RequestBody Battery battery) {
        return batteryService.createBattery(battery);
    }

    @PutMapping("/{id}/edit")
    public Battery updateBattery(@PathVariable Long id, @RequestBody Battery battery) {
        return batteryService.updateBattery(id, battery);
    }

    @DeleteMapping("/{id}")
    public void deleteBattery(@PathVariable Long id) {
        batteryService.deleteBattery(id);
    }
}

Service:

@Service
public class BatteryService {

    private final BatteryRepository batteryRepository;

    public BatteryService(BatteryRepository batteryRepository) {
        this.batteryRepository = batteryRepository;
    }

    public List<Battery> listBatteries() {
        return batteryRepository.findAll();
    }

    public List<Battery> listBatteries(Integer limit) {
        return batteryRepository.findAll().stream().limit(limit).collect(Collectors.toList());
    }

    public List<Battery> listBatteriesSorted(String sort, String param) {
        if (sort.equals("asc")) {
            return batteryRepository.findAll(Sort.by(param).ascending());
        } else if (sort.equals("desc")) {
            return batteryRepository.findAll(Sort.by(param).descending());
        } else {
            return listBatteries();
        }
    }

    public Battery getBattery(Long id) {
        return batteryRepository.findById(id).orElseThrow(BatteryNotFoundException::new);
    }

    public Battery createBattery(Battery battery) {
        return batteryRepository.save(battery);
    }

    public Battery updateBattery(Long id, Battery battery) {
        Battery existingBattery = getBattery(id);
        existingBattery.setStationName(battery.getStationName());
        existingBattery.setStationImage(battery.getStationImage());
        existingBattery.setStationPricing(battery.getStationPricing());
        existingBattery.setStationAddress(battery.getStationAddress());
        return batteryRepository.save(existingBattery);
    }

    public void deleteBattery(Long id) {
        batteryRepository.deleteById(id);
    }
}

Repository:

@Repository
public interface BatteryRepository extends JpaRepository<Battery, Long> {
}

Model:

@Entity
public class Battery {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "station_name")
    private String stationName;

    @Column(name = "station_image")
    private String stationImage;

    @Column(name = "station_pricing")
    private String stationPricing;

    @Column(name = "station_address")
    private String stationAddress;

    public Battery() {
    }

    public Battery(String stationName, String stationImage, String stationPricing, String stationAddress) {
        this.stationName = stationName;
        this.stationImage = stationImage;
        this.stationPricing = stationPricing;
        this.stationAddress = stationAddress;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getStationName() {
        return stationName;
    }

    public void setStationName(String stationName) {
        this.stationName = stationName;
    }

    public String getStationImage() {
        return stationImage;
    }

    public void setStationImage(String stationImage) {
        this.stationImage = stationImage;
    }

    public String getStationPricing() {
        return stationPricing;
    }

    public void setStationPricing(String stationPricing) {
        this.stationPricing = stationPricing;
    }

    public String getStationAddress() {
        return stationAddress;
    }

    public void setStationAddress(String stationAddress) {
        this.stationAddress = stationAddress;
    }
}